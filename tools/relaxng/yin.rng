<?xml version="1.0" encoding="utf-8"?>

<!-- Program name: yin.rng

Copyright Â© 2015 by Ladislav Lhotka, CZ.NIC <lhotka@nic.cz>

RELAX NG schema for YIN (see RFC 6020).

==

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-->

<grammar xmlns="http://relaxng.org/ns/structure/1.0"
	 ns="urn:ietf:params:xml:ns:yang:yin:1"
	 xmlns:dc="http://purl.org/dc/terms"
         datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

  <dc:title>RELAX NG Schema for YIN</dc:title>
  <dc:creator>Ladislav Lhotka</dc:creator>
  <dc:date>2013-12-04</dc:date>
  <dc:subject>YIN, XML syntax for YANG</dc:subject>
  <dc:identifier>urn:ietf:params:xml:ns:yang:yin:1</dc:identifier>
  <dc:description>RELAX NG schema defines grammar for data models
  expressed in YIN, an XML syntax equivalent to YANG.</dc:description>

  <start>
    <choice>
      <ref name="module-stmt"/>
      <ref name="submodule-stmt"/>
    </choice>
  </start>

  <define name="module-stmt">
    <element name="module">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<group>
	  <ref name="module-header-stmts"/>
	  <ref name="linkage-stmts"/>
	  <ref name="meta-stmts"/>
	  <ref name="revision-stmts"/>
	  <ref name="body-stmts"/>
	</group>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>
  
  <define name="submodule-stmt">
    <element name="submodule">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<group>
	  <ref name="submodule-header-stmts"/>
	  <ref name="linkage-stmts"/>
	  <ref name="meta-stmts"/>
	  <ref name="revision-stmts"/>
	  <ref name="body-stmts"/>
	</group>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="module-header-stmts">
    <interleave>
      <optional>
	<ref name="yang-version-stmt"/>
      </optional>
      <ref name="namespace-stmt"/>
      <ref name="prefix-stmt"/>
    </interleave>
  </define>
  
  <define name="submodule-header-stmts">
    <interleave>
      <optional>
	<ref name="yang-version-stmt"/>
      </optional>
      <ref name="belongs-to-stmt"/>
    </interleave>
  </define>

  <define name="meta-stmts">
    <interleave>
      <optional>
	<ref name="organization-stmt"/>
      </optional>
      <optional>
	<ref name="contact-stmt"/>
      </optional>
      <ref name="desc-ref"/>
    </interleave>
  </define>
  
  <define name="linkage-stmts">
      <zeroOrMore>
	<choice>
	  <ref name="import-stmt"/>
	  <ref name="include-stmt"/>
	</choice>
      </zeroOrMore>
  </define>

  <define name="revision-stmts">
    <zeroOrMore>
      <ref name="revision-stmt"/>
    </zeroOrMore>
  </define>
  
  <define name="body-stmts">
    <zeroOrMore>
      <choice>
	<ref name="extension-stmt"/>
	<ref name="feature-stmt"/>
	<ref name="identity-stmt"/>
	<ref name="typedef-stmt"/>
	<ref name="grouping-stmt"/>
	<ref name="data-def-stmt"/>
	<ref name="augment-stmt"/>
	<ref name="rpc-stmt"/>
	<ref name="notification-stmt"/>
	<ref name="deviation-stmt"/>
      </choice>
    </zeroOrMore>
  </define>

  <define name="feature-stmt">
    <element name="feature">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="if-feature-stmts">
    <zeroOrMore>
      <element name="if-feature">
	<attribute name="name">
	  <data type="string"/>
	</attribute>
	<ref name="extensions"/>
      </element>
    </zeroOrMore>
  </define>

  <define name="identity-stmt">
    <element name="identity">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="if-feature-stmts"/>
	<zeroOrMore>
	  <ref name="base-stmt"/>
	</zeroOrMore>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="base-stmt">
    <element name="base">
      <attribute name="name">
	<ref name="identifier-ref"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="data-def-stmt">
    <choice>
      <ref name="container-stmt"/>
      <ref name="leaf-stmt"/>
      <ref name="leaf-list-stmt"/>
      <ref name="list-stmt"/>
      <ref name="choice-stmt"/>
      <ref name="anydata-stmt"/>
      <ref name="anyxml-stmt"/>
      <ref name="uses-stmt"/>
    </choice>
  </define>

  <define name="yang-version-stmt">
    <element name="yang-version">
      <attribute name="value">
	<choice>
	  <value>1</value>
	  <value>1.1</value>
	</choice>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="import-stmt">
    <element name="import">
      <attribute name="module">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="prefix-stmt"/>
	<optional>
	  <ref name="revision-date-stmt"/>
	</optional>
	<ref name="desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="include-stmt">
    <element name="include">
      <attribute name="module">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="revision-date-stmt"/>
	</optional>
	<ref name="desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="namespace-stmt">
    <element name="namespace">
      <attribute name="uri">
	<data type="anyURI"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="prefix-stmt">
    <element name="prefix">
      <attribute name="value">
	<ref name="identifier"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="revision-date-stmt">
    <element name="revision-date">
      <attribute name="date">
	<data type="date"/>
      </attribute>
    </element>
  </define>

  <define name="belongs-to-stmt">
    <element name="belongs-to">
      <attribute name="module">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="prefix-stmt"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="organization-stmt">
    <element name="organization">
      <interleave>
	<ref name="text-element"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="text-element">
    <element name="text">
      <ref name="text-content"/>
    </element>
  </define>

  <define name="text-content">
    <text/>
  </define>

  <define name="contact-stmt">
    <element name="contact">
      <interleave>
	<ref name="text-element"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="description-stmt">
    <element name="description">
      <interleave>
	<ref name="text-element"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="reference-stmt">
    <element name="reference">
      <interleave>
	<ref name="text-element"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="units-stmt">
    <element name="units">
      <attribute name="name">
	<data type="string"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="revision-stmt">
    <element name="revision">
      <attribute name="date">
	<data type="date"/>
      </attribute>
      <interleave>
	<ref name="desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="extension-stmt">
    <element name="extension">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="argument-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="argument-stmt">
    <element name="argument">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="yin-element-stmt"/>
	</optional>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="yin-element-stmt">
    <element name="yin-element">
      <attribute name="value">
	<data type="boolean"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="typedef-stmt">
    <element name="typedef">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="type-stmt"/>
	<optional>
	  <ref name="units-stmt"/>
	</optional>
	<optional>
	  <ref name="default-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="type-stmt">
    <element name="type">
      <interleave>
	<choice>
	  <ref name="decimal64-type"/>
	  <ref name="integer-type"/>
	  <ref name="string-type"/>
	  <ref name="enumeration-type"/>
	  <ref name="bits-type"/>
	  <ref name="binary-type"/>
	  <ref name="leafref-type"/>
	  <ref name="identityref-type"/>
	  <ref name="union-type"/>
	  <ref name="instance-identifier-type"/>
	  <group>
	    <attribute name="name">
	      <ref name="identifier-ref"/>
	    </attribute>
	    <choice>
	      <ref name="range-stmt"/>
	      <interleave>
		<ref name="length-stmt"/>
		<ref name="pattern-stmts"/>
	      </interleave>
	      <oneOrMore>
		<ref name="enum-stmt"/>
	      </oneOrMore>
	      <oneOrMore>
		<ref name="bit-stmt"/>
	      </oneOrMore>
	    </choice>
	  </group>
	</choice>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="decimal64-type">
    <attribute name="name">
      <value>decimal64</value>
    </attribute>
    <interleave>
      <ref name="fraction-digits-stmt"/>
      <ref name="range-stmt"/>
    </interleave>
  </define>

  <define name="fraction-digits-stmt">
    <element name="fraction-digits">
      <attribute name="value">
	<data type="unsignedByte">
	  <param name="minInclusive">1</param>
	  <param name="maxInclusive">18</param>
	</data>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="range-stmt">
    <optional>
      <element name="range">
	<attribute name="value">
	  <ref name="range-expr"/>
	</attribute>
	<interleave>
	  <optional>
	    <ref name="error-message-stmt"/>
	  </optional>
	  <optional>
	    <ref name="error-app-tag-stmt"/>
	  </optional>
	  <ref name="desc-ref"/>
	  <ref name="extensions"/>
	</interleave>
      </element>
    </optional>
  </define>

  <define name="integer-type">
    <attribute name="name">
      <choice>
	<value>int8</value>
	<value>int16</value>
	<value>int32</value>
	<value>int64</value>
	<value>uint8</value>
	<value>uint16</value>
	<value>uint32</value>
	<value>uint64</value>
      </choice>
    </attribute>
    <ref name="range-stmt"/>
  </define>

  <define name="string-type">
    <attribute name="name">
      <value>string</value>
    </attribute>
    <interleave>
      <ref name="length-stmt"/>
      <ref name="pattern-stmts"/>
    </interleave>
  </define>

  <define name="length-stmt">
    <optional>
      <element name="length">
	<attribute name="value">
	  <ref name="length-expr"/>
	</attribute>
	<interleave>
	  <optional>
	    <ref name="error-message-stmt"/>
	  </optional>
	  <optional>
	    <ref name="error-app-tag-stmt"/>
	  </optional>
	  <ref name="desc-ref"/>
	  <ref name="extensions"/>
	</interleave>
      </element>
    </optional>
  </define>

  <define name="pattern-stmts">
    <zeroOrMore>
      <element name="pattern">
	<attribute name="value">
	  <data type="string"/>
	</attribute>
	<interleave>
	  <optional>
	    <ref name="modifier-stmt"/>
	  </optional>
	  <optional>
	    <ref name="error-message-stmt"/>
	  </optional>
	  <optional>
	    <ref name="error-app-tag-stmt"/>
	  </optional>
	  <ref name="desc-ref"/>
	  <ref name="extensions"/>
	</interleave>
      </element>
    </zeroOrMore>
  </define>

  <define name="modifier-stmt">
    <element name="modifier">
      <attribute name="value">
	<ref name="modifier-arg"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="modifier-arg">
    <value>invert-match</value>
  </define>

  <define name="default-stmt">
    <element name="default">
      <attribute name="value">
	<data type="string"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="enumeration-type">
    <attribute name="name">
      <value>enumeration</value>
    </attribute>
    <oneOrMore>
      <ref name="enum-stmt"/>
    </oneOrMore>
  </define>

  <define name="enum-stmt">
    <element name="enum">
      <attribute name="name"/>
      <interleave>
	<ref name="if-feature-stmts"/>
	<optional>
	  <ref name="value-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="bits-type">
    <attribute name="name">
      <value>bits</value>
    </attribute>
    <oneOrMore>
      <ref name="bit-stmt"/>
    </oneOrMore>
  </define>

  <define name="bit-stmt">
    <element name="bit">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="if-feature-stmts"/>
	<optional>
	  <ref name="position-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="position-stmt">
    <element name="position">
      <attribute name="value">
	<data type="nonNegativeInteger"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="binary-type">
    <attribute name="name">
      <value>binary</value>
    </attribute>
    <interleave>
      <optional>
	<ref name="length-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="leafref-type">
    <attribute name="name">
      <value>leafref</value>
    </attribute>
    <interleave>
      <ref name="path-stmt"/>
      <optional>
	<ref name="require-instance-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="path-stmt">
    <element name="path">
      <attribute name="value">
        <ref name="path-arg"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="identityref-type">
    <attribute name="name">
      <value>identityref</value>
    </attribute>
    <oneOrMore>
      <ref name="base-stmt"/>
    </oneOrMore>
  </define>

  <define name="union-type">
    <attribute name="name">
      <value>union</value>
    </attribute>
    <oneOrMore>
      <ref name="type-stmt"/>
    </oneOrMore>
  </define>

  <define name="instance-identifier-type">
    <attribute name="name">
      <value>instance-identifier</value>
    </attribute>
    <optional>
      <ref name="require-instance-stmt"/>
    </optional>
  </define>

  <define name="require-instance-stmt">
    <element name="require-instance">
      <attribute name="value">
	<data type="boolean"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="status-stmt">
    <element name="status">
      <attribute name="value">
	<ref name="status-arg"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="status-arg">
    <choice>
      <value>current</value>
      <value>obsolete</value>
      <value>deprecated</value>
    </choice>
  </define>
  
  <define name="config-stmt">
    <element name="config">
      <attribute name="value">
	<data type="boolean"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="mandatory-stmt">
    <element name="mandatory">
      <attribute name="value">
	<data type="boolean"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="presence-stmt">
    <element name="presence">
      <attribute name="value">
	<data type="string"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="ordered-by-stmt">
    <element name="ordered-by">
      <attribute name="value">
	<ref name="ordered-by-arg"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="ordered-by-arg">
    <choice>
      <value>user</value>
      <value>system</value>
    </choice>
  </define>

  <define name="must-stmt">
    <element name="must">
      <attribute name="condition">
	<data type="string"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="error-message-stmt"/>
	</optional>
	<optional>
	  <ref name="error-app-tag-stmt"/>
	</optional>
	<ref name="desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="error-message-stmt">
    <element name="error-message">
      <element name="value">
	<text/>
      </element>
      <ref name="extensions"/>
    </element>
  </define>
  
  <define name="error-app-tag-stmt">
    <element name="error-app-tag">
      <attribute name="value">
	<data type="string"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="min-elements-stmt">
    <element name="min-elements">
      <attribute name="value">
	<data type="nonNegativeInteger"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>
  
  <define name="max-elements-stmt">
    <element name="max-elements">
      <attribute name="value">
	<choice>
	  <value>unbounded</value>
	  <data type="positiveInteger"/>
	</choice>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="value-stmt">
    <element name="value">
      <attribute name="value">
	<data type="integer"/>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>
  
  <define name="grouping-stmt">
    <element name="grouping">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <choice>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	    <ref name="data-def-stmt"/>
	    <ref name="action-stmt"/>
	    <ref name="notification-stmt"/>
	  </choice>
	</zeroOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="container-stmt">
    <element name="container">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="presence-stmt"/>
	</optional>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <choice>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	    <ref name="data-def-stmt"/>
	    <ref name="action-stmt"/>
	    <ref name="notification-stmt"/>
	  </choice>
	</zeroOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="leaf-stmt">
    <element name="leaf">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<ref name="type-stmt"/>
	<optional>
	  <ref name="units-stmt"/>
	</optional>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="default-stmt"/>
	</optional>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="mandatory-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="leaf-list-stmt">
    <element name="leaf-list">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<ref name="type-stmt"/>
	<optional>
	  <ref name="units-stmt"/>
	</optional>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<zeroOrMore>
	  <ref name="default-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="min-elements-stmt"/>
	</optional>
	<optional>
	  <ref name="max-elements-stmt"/>
	</optional>
	<optional>
	  <ref name="ordered-by-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="list-stmt">
    <element name="list">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="key-stmt"/>
	</optional>
	<zeroOrMore>
	  <ref name="unique-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="min-elements-stmt"/>
	</optional>
	<optional>
	  <ref name="max-elements-stmt"/>
	</optional>
	<optional>
	  <ref name="ordered-by-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <choice>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	    <ref name="action-stmt"/>
	    <ref name="notification-stmt"/>
	  </choice>
	</zeroOrMore>
	<oneOrMore>
	  <ref name="data-def-stmt"/>
	</oneOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="key-stmt">
    <element name="key">
      <attribute name="value">
	<list>
	  <oneOrMore>
	    <ref name="identifier"/>
	  </oneOrMore>
	</list>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="unique-stmt">
    <element name="unique">
      <attribute name="tag">
	<list>
	  <oneOrMore>
	    <ref name="descendant-schema-nodeid"/>
	  </oneOrMore>
	</list>
      </attribute>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="choice-stmt">
    <element name="choice">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<optional>
	  <ref name="default-stmt"/>
	</optional>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="mandatory-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <choice>
	    <ref name="short-case-stmt"/>
	    <ref name="case-stmt"/>
	  </choice>
	</zeroOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="short-case-stmt">
    <choice>
      <ref name="container-stmt"/>
      <ref name="leaf-stmt"/>
      <ref name="leaf-list-stmt"/>
      <ref name="list-stmt"/>
      <ref name="anyxml-stmt"/>
    </choice>
  </define>

  <define name="case-stmt">
    <element name="case">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <ref name="data-def-stmt"/>
	</zeroOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="anydata-stmt">
    <element name="anydata">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="mandatory-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="anyxml-stmt">
    <element name="anyxml">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="mandatory-stmt"/>
	</optional>
	<ref name="status-desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="uses-stmt">
    <element name="uses">
      <attribute name="name">
	<ref name="identifier-ref"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <ref name="refine-stmt"/>
	</zeroOrMore>
	<zeroOrMore>
	  <ref name="uses-augment-stmt"/>
	</zeroOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="refine-stmt">
    <element name="refine">
      <attribute name="target-node">
	<ref name="descendant-schema-nodeid"/>
      </attribute>
      <interleave>
	<ref name="if-feature-stmts"/>
	<choice>
	  <ref name="refine-container-stmts"/>
	  <ref name="refine-leaf-stmts"/>
	  <ref name="refine-leaf-list-stmts"/>
	  <ref name="refine-list-stmts"/>
	  <ref name="refine-choice-stmts"/>
	  <ref name="refine-anyxml-stmts"/>
	</choice>
	<ref name="desc-ref"/>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="refine-container-stmts">
    <interleave>
      <zeroOrMore>
	<ref name="must-stmt"/>
      </zeroOrMore>
      <optional>
	<ref name="presence-stmt"/>
      </optional>
      <optional>
	<ref name="config-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="refine-leaf-stmts">
    <interleave>
      <zeroOrMore>
	<ref name="must-stmt"/>
      </zeroOrMore>
      <optional>
	<ref name="default-stmt"/>
      </optional>
      <optional>
	<ref name="config-stmt"/>
      </optional>
      <optional>
	<ref name="mandatory-stmt"/>
      </optional>
    </interleave>
  </define>
  
  <define name="refine-leaf-list-stmts">
    <interleave>
      <zeroOrMore>
	<ref name="must-stmt"/>
      </zeroOrMore>
      <zeroOrMore>
	<ref name="default-stmt"/>
      </zeroOrMore>
      <optional>
	<ref name="config-stmt"/>
      </optional>
      <optional>
	<ref name="min-elements-stmt"/>
      </optional>
      <optional>
	<ref name="max-elements-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="refine-list-stmts">
    <interleave>
      <zeroOrMore>
	<ref name="must-stmt"/>
      </zeroOrMore>
      <optional>
	<ref name="config-stmt"/>
      </optional>
      <optional>
	<ref name="min-elements-stmt"/>
      </optional>
      <optional>
	<ref name="max-elements-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="refine-choice-stmts">
    <interleave>
      <optional>
	<ref name="default-stmt"/>
      </optional>
      <optional>
	<ref name="config-stmt"/>
      </optional>
      <optional>
	<ref name="mandatory-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="refine-anyxml-stmts">
    <interleave>
      <optional>
	<ref name="config-stmt"/>
      </optional>
      <optional>
	<ref name="mandatory-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="uses-augment-stmt">
    <element name="augment">
      <attribute name="target-node">
	<ref name="descendant-schema-nodeid"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<oneOrMore>
	  <choice>
	    <ref name="data-def-stmt"/>
	    <ref name="case-stmt"/>
	    <ref name="action-stmt"/>
	    <ref name="notification-stmt"/>
	  </choice>
	</oneOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="augment-stmt">
    <element name="augment">
      <attribute name="target-node">
	<ref name="absolute-schema-nodeid"/>
      </attribute>
      <interleave>
	<optional>
	  <ref name="when-stmt"/>
	</optional>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<oneOrMore>
	  <choice>
	    <ref name="data-def-stmt"/>
	    <ref name="case-stmt"/>
	    <ref name="action-stmt"/>
	    <ref name="notification-stmt"/>
	  </choice>
	</oneOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="when-stmt">
    <element name="when">
      <attribute name="condition">
	<data type="string"/>
      </attribute>
      <ref name="desc-ref"/>
      <ref name="extensions"/>
    </element>
  </define>

  <define name="rpc-stmt">
    <element name="rpc">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <choice>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	  </choice>
	</zeroOrMore>
	<optional>
	  <ref name="input-stmt"/>
	</optional>
	<optional>
	  <ref name="output-stmt"/>
	</optional>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="action-stmt">
    <element name="action">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <choice>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	  </choice>
	</zeroOrMore>
	<optional>
	  <ref name="input-stmt"/>
	</optional>
	<optional>
	  <ref name="output-stmt"/>
	</optional>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="input-stmt">
    <element name="input">
      <interleave>
	<zeroOrMore>
	  <choice>
	    <ref name="must-stmt"/>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	  </choice>
	</zeroOrMore>
	<oneOrMore>
	  <ref name="data-def-stmt"/>
	</oneOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="output-stmt">
    <element name="output">
      <interleave>
	<zeroOrMore>
	  <choice>
	    <ref name="must-stmt"/>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	  </choice>
	</zeroOrMore>
	<oneOrMore>
	  <ref name="data-def-stmt"/>
	</oneOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="notification-stmt">
    <element name="notification">
      <attribute name="name">
	<ref name="identifier"/>
      </attribute>
      <interleave>
	<ref name="if-feature-stmts"/>
	<ref name="status-desc-ref"/>
	<zeroOrMore>
	  <choice>
	    <ref name="must-stmt"/>
	    <ref name="typedef-stmt"/>
	    <ref name="grouping-stmt"/>
	    <ref name="data-def-stmt"/>
	  </choice>
	</zeroOrMore>
	<ref name="extensions"/>
      </interleave>
    </element>
  </define>

  <define name="deviation-stmt">
    <element name="deviation">
      <attribute name="target-node">
	<ref name="absolute-schema-nodeid"/>
      </attribute>
      <interleave>
	<ref name="desc-ref"/>
	<choice>
	  <ref name="deviate-not-supported-stmt"/>
	  <oneOrMore>
	    <choice>
	      <ref name="deviate-add-stmt"/>
	      <ref name="deviate-replace-stmt"/>
	      <ref name="deviate-delete-stmt"/>
	    </choice>
	  </oneOrMore>
	</choice>
      </interleave>
    </element>
  </define>

  <define name="deviate-not-supported-stmt">
    <element name="deviate">
      <attribute name="value">
	<value>not-supported</value>
      </attribute>
    </element>
  </define>

  <define name="deviate-add-stmt">
    <element name="deviate">
      <attribute name="value">
	<value>add</value>
      </attribute>
      <interleave>
	<optional>
	  <ref name="units-stmt"/>
	</optional>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<zeroOrMore>
	  <ref name="unique-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="default-stmt"/>
	</optional>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="mandatory-stmt"/>
	</optional>
	<optional>
	  <ref name="min-elements-stmt"/>
	</optional>
	<optional>
	  <ref name="max-elements-stmt"/>
	</optional>
      </interleave>
    </element>
  </define>

  <define name="deviate-delete-stmt">
    <element name="deviate">
      <attribute name="value">
	<value>delete</value>
      </attribute>
      <interleave>
	<optional>
	  <ref name="units-stmt"/>
	</optional>
	<zeroOrMore>
	  <ref name="must-stmt"/>
	</zeroOrMore>
	<zeroOrMore>
	  <ref name="unique-stmt"/>
	</zeroOrMore>
	<optional>
	  <ref name="default-stmt"/>
	</optional>
      </interleave>
    </element>
  </define>

  <define name="deviate-replace-stmt">
    <element name="deviate">
      <attribute name="value">
	<value>replace</value>
      </attribute>
      <interleave>
	<optional>
	  <ref name="type-stmt"/>
	</optional>
	<optional>
	  <ref name="units-stmt"/>
	</optional>
	<optional>
	  <ref name="default-stmt"/>
	</optional>
	<optional>
	  <ref name="config-stmt"/>
	</optional>
	<optional>
	  <ref name="mandatory-stmt"/>
	</optional>
	<optional>
	  <ref name="min-elements-stmt"/>
	</optional>
	<optional>
	  <ref name="max-elements-stmt"/>
	</optional>
      </interleave>
    </element>
  </define>

  <define name="extensions">
    <zeroOrMore>
      <element>
	<anyName>
	  <except>
	    <nsName/>
	  </except>
	</anyName>
	<zeroOrMore>
	  <choice>
	    <attribute>
	      <anyName/>
	    </attribute>
	    <ref name="any-element"/>
	  </choice>
	</zeroOrMore>
      </element>
    </zeroOrMore>
  </define>

  <define name="any-element">
    <element>
      <anyName/>
      <mixed>
	<zeroOrMore>
	  <choice>
	    <attribute>
	      <anyName/>
	    </attribute>
	    <ref name="any-element"/>
	  </choice>
	</zeroOrMore>
      </mixed>
    </element>
  </define>

  <!-- Common combinations of patterns -->

  <define name="desc-ref">
    <interleave>
      <optional>
	<ref name="description-stmt"/>
      </optional>
      <optional>
	<ref name="reference-stmt"/>
      </optional>
    </interleave>
  </define>

  <define name="status-desc-ref">
    <interleave>
      <optional>
	<ref name="status-stmt"/>
      </optional>
      <ref name="desc-ref"/>
    </interleave>
  </define>

  <!-- Regular expressions for lexical terms -->

  <define name="identifier">
    <data type="NCName">
      <param name="pattern">[_A-Za-z][_\-A-Za-z0-9.]*</param>
      <param name="pattern">..?|[^xX].*|.[^mM].*|..[^lL].*</param>
    </data>
  </define>

  <define name="identifier-ref">
    <data type="Name">
      <param name="pattern">([_A-Za-z][_\-A-Za-z0-9.]*:)?[_A-Za-z][_\-A-Za-z0-9.]*</param>
      <param
	  name="pattern">(..?|[^xX].*|.[^mM].*|..[^lL].*):(..?|[^xX].*|.[^mM].*|..[^lL].*)|[^:]{1,2}|[^xX][^:]*|.[^mM:][^:]*|.[^:][^lL:][^:]*</param>
    </data>
  </define>

  <define name="range-expr">
    <data type="string">
      <param name="pattern">\s*(-INF|INF|min|max|\-?(0|[1-9][0-9]*)(\.[0-9]+(E[\-+]?[0-9]+)?)?)(\s*\.\.\s*(-INF|INF|min|max|\-?(0|[1-9][0-9]*)(\.[0-9]+(E[\-+]?[0-9]+)?)?))?(\s*\|\s*(-INF|INF|min|max|\-?(0|[1-9][0-9]*)(\.[0-9]+(E[\-+]?[0-9]+)?)?)(\s*\.\.\s*(-INF|INF|min|max|\-?(0|[1-9][0-9]*)(\.[0-9]+(E[\-+]?[0-9]+)?)?))?)*\s*</param>
    </data>
  </define>

  <define name="length-expr">
    <data type="string">
      <param name="pattern">\s*(min|max|(0|[1-9][0-9]*))(\s*\.\.\s*(min|max|(0|[1-9][0-9]*)))?(\s*\|\s*(min|max|(0|[1-9][0-9]*))(\s*\.\.\s*(min|max|(0|[1-9][0-9]*)))?)*\s*</param>
    </data>
  </define>

  <define name="path-arg">
    <data type="string">
      <param name="pattern">((/([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*(\[\s*([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*=\s*current\s*\(\s*\)\s*/\s*(\.\.\s*/\s*)+(([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*/\s*)*([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*\])*)+)|((\.\./)+([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*((\[\s*([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*=\s*current\s*\(\s*\)\s*/\s*(\.\.\s*/\s*)+(([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*/\s*)*([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*\])*(/([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*(\[\s*([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*=\s*current\s*\(\s*\)\s*/\s*(\.\.\s*/\s*)+(([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*/\s*)*([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*\s*\])*)+)?)</param>
    </data>
  </define>

  <define name="absolute-schema-nodeid">
    <data type="string">
      <param name="pattern">(/([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*)+</param>
    </data>
  </define>

  <define name="descendant-schema-nodeid">
    <data type="string">
      <param name="pattern">([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*(/([_A-Za-z][._\-A-Za-z0-9]*:)?[_A-Za-z][._\-A-Za-z0-9]*)*</param>
    </data>
  </define>
</grammar>
