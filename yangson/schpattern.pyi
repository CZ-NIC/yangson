from .enumerations import ContentType
from .instance import InstanceNode
from .typealiases import InstanceName, YangIdentifier, _Singleton
from .xpathast import Expr
from typing import Optional

class SchemaPattern:
    @staticmethod
    def optional(p: SchemaPattern) -> SchemaPattern: ...
    @staticmethod
    def optional_config(p: SchemaPattern) -> SchemaPattern: ...
    def nullable(self, ctype: ContentType) -> bool: ...
    def empty(self) -> bool: ...

class Empty(SchemaPattern, metaclass=_Singleton):
    def nullable(self, ctype: ContentType) -> bool: ...
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def empty(self) -> bool: ...
    def tree(self, indent: int = 0) -> str: ...

class EmptyConfig(SchemaPattern, metaclass=_Singleton):
    def nullable(self, ctype: ContentType) -> bool: ...
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def tree(self, indent: int = 0) -> str: ...

class NotAllowed(SchemaPattern, metaclass=_Singleton):
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def tree(self, indent: int = 0) -> str: ...

class Conditional(SchemaPattern):
    when: SchemaPattern
    def __init__(self, when: Expr) -> None: ...
    def empty(self) -> bool: ...
    def check_when(self) -> bool: ...

class Typeable(SchemaPattern):
    ctype: ContentType
    def __init__(self, ctype: ContentType) -> None: ...
    def match_ctype(self, ctype: ContentType) -> bool: ...

class ConditionalPattern(Conditional):
    pattern: SchemaPattern
    def __init__(self, p: SchemaPattern, when: Expr) -> None: ...
    def nullable(self, ctype: ContentType) -> bool: ...
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def tree(self, indent: int = 0) -> str: ...

class Member(Typeable, Conditional):
    name: InstanceName
    def __init__(self, name: InstanceName, ctype: ContentType, when: Optional[Expr]) -> None: ...
    def nullable(self, ctype: ContentType) -> bool: ...
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def tree(self, indent: int = 0) -> str: ...

class Alternative(SchemaPattern):
    @classmethod
    def combine(cls, p: SchemaPattern, q: SchemaPattern) -> Alternative: ...
    left: SchemaPattern
    right: SchemaPattern
    def __init__(self, p: SchemaPattern, q: SchemaPattern) -> None: ...
    def nullable(self, ctype: ContentType) -> bool: ...
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def tree(self, indent: int = 0) -> str: ...

class ChoicePattern(Alternative, Typeable):
    ctype: ContentType
    name: YangIdentifier
    def __init__(self, p: SchemaPattern, q: SchemaPattern, name: YangIdentifier) -> None: ...
    def nullable(self, ctype: ContentType) -> bool: ...
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def tree(self, indent: int = 0) -> str: ...

class Pair(SchemaPattern):
    @classmethod
    def combine(cls, p: SchemaPattern, q: SchemaPattern) -> SchemaPattern: ...
    left: SchemaPattern
    right: SchemaPattern
    def __init__(self, p: SchemaPattern, q: SchemaPattern) -> None: ...
    def nullable(self, ctype: ContentType) -> bool: ...
    def deriv(self, x: str, ctype: ContentType) -> SchemaPattern: ...
    def tree(self, indent: int = 0) -> str: ...
