import xml.etree.ElementTree as ET
from .constraint import Must
from .datatype import DataType, IdentityrefType, LinkType
from .enumerations import Axis, ContentType, DefaultDeny, NodeStatus, ValidationScope
from .exceptions import AnnotationTypeError, InvalidArgument, MissingAnnotationTarget, MissingModuleNamespace, RawMemberError, RawTypeError, SchemaError, SemanticError, UndefinedAnnotation, YangTypeError, YangsonException
from .instance import ArrayEntry, EmptyList, InstanceNode, InstanceRoute, MemberName, ObjectMember
from .instvalue import ArrayValue, EntryValue, MetadataObject, ObjectValue, Value
from .schemadata import IdentityAdjacency, SchemaContext, SchemaData
from .schpattern import ChoicePattern, ConditionalPattern, Empty, Member, NotAllowed, Pair, SchemaPattern
from .statement import Statement
from .typealiases import DataPath, InstanceName, JSONPointer, QualName, RawEntry, RawList, RawMetadataObject, RawObject, RawValue, ScalarValue, SchemaRoute, YangIdentifier, RawScalar
from .xpathast import Expr, LocationPath, Root, Step
from .xpathparser import XPathParser
from typing import Optional

class Annotation:
    type: DataType
    description: Optional[str]
    def __init__(self, type: DataType, description: Optional[str] = None) -> None: ...

class SchemaNode:
    name: Optional[YangIdentifier]
    ns: Optional[YangIdentifier]
    parent: Optional[InternalNode]
    description: Optional[str]
    must: list[Must]
    when: Optional[Expr]
    val_count: int
    def __init__(self) -> None: ...
    @property
    def qual_name(self) -> QualName: ...
    @property
    def config(self) -> bool: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def mandatory_config(self) -> bool: ...
    @property
    def status(self) -> NodeStatus: ...
    def delete(self) -> None: ...
    def schema_root(self) -> SchemaTreeNode: ...
    def content_type(self) -> ContentType: ...
    def data_parent(self) -> Optional[InternalNode]: ...
    def iname(self) -> InstanceName: ...
    def data_path(self) -> DataPath: ...
    def state_roots(self) -> list[DataPath]: ...
    def from_raw(self, rval: RawValue, jptr: JSONPointer = '') -> Value: ...
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ...
    def clear_val_counters(self) -> None: ...
    def as_schema_route(self) -> SchemaRoute: ...

class InternalNode(SchemaNode):
    children: list[SchemaNode]
    schema_pattern: Optional[SchemaPattern]
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def get_child(self, name: YangIdentifier, ns: Optional[YangIdentifier] = None) -> Optional[SchemaNode]: ...
    def get_schema_descendant(self, route: SchemaRoute) -> Optional[SchemaNode]: ...
    def get_data_child(self, name: YangIdentifier, ns: Optional[YangIdentifier] = None) -> Optional[DataNode]: ...
    def filter_children(self, ctype: Optional[ContentType] = None) -> list[SchemaNode]: ...
    def data_children(self) -> list['DataNode']: ...
    def from_raw(self, rval: RawValue, jptr: JSONPointer = '') -> Value: ...
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> ObjectValue: ...
    def clear_val_counters(self) -> None: ...

class GroupNode(InternalNode): ...

class YangData(GroupNode): ...

class SchemaTreeNode(GroupNode):
    annotations: dict[QualName, Annotation]
    schema_data: Optional[SchemaData]
    def __init__(self, schemadata: Optional[SchemaData] = None) -> None: ...
    def iname(self) -> InstanceName: ...
    def data_parent(self) -> None: ...

class DataNode(SchemaNode):
    default_deny: DefaultDeny
    def __init__(self) -> None: ...
    def orphan_instance(self, rval: RawValue) -> ObjectMember: ...
    def split_instance_route(self, route: InstanceRoute) -> Optional[tuple[InstanceRoute, InstanceRoute]]: ...

class TerminalNode(SchemaNode):
    type: DataType
    def __init__(self) -> None: ...
    def content_type(self) -> ContentType: ...
    @property
    def units(self) -> Optional[str]: ...
    def from_raw(self, rval: RawScalar, jptr: JSONPointer = '') -> ScalarValue: ... # type: ignore[override]
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ...

class ContainerNode(DataNode, InternalNode):
    presence: bool
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def mandatory_config(self) -> bool: ...

class SequenceNode(DataNode):
    min_elements: int
    max_elements: Optional[int]
    user_ordered: bool
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def from_raw(self, rval: RawList, jptr: JSONPointer = '') -> ArrayValue: ... # type: ignore[override]
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False, tagname: Optional[str] = None) -> ArrayValue: ...
    def entry_from_raw(self, rval: RawEntry, jptr: JSONPointer = '') -> EntryValue: ...
    def entry_from_xml(self, rval: ET.Element, jptr: JSONPointer = '') -> EntryValue: ...

class ListNode(SequenceNode, InternalNode):
    keys: list[QualName]
    unique: list[list[LocationPath]]
    def __init__(self) -> None: ...
    def orphan_entry(self, rval: RawObject) -> ArrayEntry: ...
    def from_raw(self, rval: RawList, jptr: JSONPointer = '') -> Value: ... # type: ignore[override]
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ... # type: ignore[override]

class ChoiceNode(InternalNode):
    default_case: QualName
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...

class CaseNode(InternalNode): ...

class LeafNode(DataNode, TerminalNode):
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def default(self) -> Optional[ScalarValue]: ...

class LeafListNode(SequenceNode, TerminalNode):
    @property
    def default(self) -> Optional[ScalarValue]: ...
    def from_raw(self, rval: RawList, jptr: JSONPointer = "") -> ArrayValue: ... # type: ignore[override]

class AnyContentNode(DataNode):
    def __init__(self) -> None: ...
    def content_type(self) -> ContentType: ...
    @property
    def mandatory(self) -> bool: ...
    def from_raw(self, rval: RawValue, jptr: JSONPointer = '') -> Value: ...
    def to_raw(self, value: Value) -> RawValue: ...
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ...

class AnydataNode(AnyContentNode): ...
class AnyxmlNode(AnyContentNode): ...

class RpcActionNode(SchemaTreeNode):
    default_deny: DefaultDeny
    def __init__(self) -> None: ...
    def iname(self) -> InstanceName: ...
    def data_parent(self) -> None: ...

class InputNode(InternalNode, DataNode):
    name: str
    ns: YangIdentifier
    def __init__(self, ns: str) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def iname(self) -> InstanceName: ...

class OutputNode(InternalNode, DataNode):
    name: str
    ns: YangIdentifier
    def __init__(self, ns: str) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def iname(self) -> InstanceName: ...

class NotificationNode(SchemaTreeNode):
    default_deny: DefaultDeny
    def __init__(self) -> None: ...
