import xml.etree.ElementTree as ET
from .enumerations import ContentType, ValidationScope
from .exceptions import InstanceException, InstanceValueError, NonexistentInstance
from .instvalue import ArrayValue, InstanceKey, ObjectValue, Value
from .parser import Parser
from .schemadata import SchemaData
from .schemanode import DataNode
from .typealiases import InstanceName, JSONPointer, QualName, ScalarValue, RawValue, YangIdentifier, _Singleton
from datetime import datetime
from typing import Any, TypeVar, Generic, Iterator, Union, Optional, NoReturn

__all__ = ['InstanceNode', 'RootNode', 'ObjectMember', 'ArrayEntry', 'EntryValue', 'InstanceIdParser', 'ResourceIdParser', 'InstanceRoute', 'InstanceException', 'InstanceValueError', 'NonexistentInstance']

class OutputFilter:
    def begin_member(self, parent: InstanceNode, node: InstanceNode, attributes: dict[str, Any]) -> bool: ...
    def end_member(self, parent: InstanceNode, node: InstanceNode, attributes: dict[str, Any]) -> bool: ...
    def begin_element(self, parent: InstanceNode, node: InstanceNode, attributes: dict[str, Any]) -> bool: ...
    def end_element(self, parent: InstanceNode, node: InstanceNode, attributes: dict[str, Any]) -> bool: ...

class LinkedList:
    @classmethod
    def from_list(cls, vals: list[Value] = [], reverse: bool = False) -> LinkedList: ...
    head: Value
    tail: LinkedList
    def __init__(self, head: Value, tail: LinkedList) -> None: ...
    def __bool__(self) -> bool: ...
    def __iter__(self) -> Iterator[Value]: ...
    def cons(self, val: Value) -> LinkedList: ...
    def pop(self) -> tuple[Value, LinkedList]: ...

class EmptyList(LinkedList, metaclass=_Singleton):
    def __init__(self) -> None: ...
    def __bool__(self) -> bool: ...
    def __getitem__(self, key: int) -> Value: ...
    def pop(self) -> tuple[Any, LinkedList]: ...

class InstanceNode:
    parinst: Optional[InstanceNode]
    schema_node: DataNode
    schema_data: Optional[SchemaData]
    timestamp: datetime
    value: Value
    def __init__(self, key: InstanceKey, value: Value, parinst: Optional[InstanceNode], schema_node: DataNode, timestamp: datetime) -> None: ...
    @property
    def name(self) -> InstanceName: ...
    @property
    def namespace(self) -> Optional[YangIdentifier]: ...
    @property
    def path(self) -> tuple[InstanceKey]: ...
    def __getitem__(self, key: InstanceKey) -> InstanceNode: ...
    def __iter__(self) -> Iterator[InstanceNode]: ...
    def json_pointer(self) -> JSONPointer: ...
    def instance_route(self) -> InstanceRoute: ...
    def is_internal(self) -> bool: ...
    def put_member(self, name: InstanceName, value: Value, raw: bool = False) -> InstanceNode: ...
    def delete_item(self, key: InstanceKey) -> InstanceNode: ...
    def up(self) -> InstanceNode: ...
    def top(self) -> InstanceNode: ...
    def update(self, value: Union[RawValue, Value], raw: bool = False) -> InstanceNode: ...
    def merge(self, value: Union[RawValue, Value], raw: bool = False) -> InstanceNode: ...
    def goto(self, iroute: InstanceRoute) -> InstanceNode: ...
    def peek(self, iroute: InstanceRoute) -> Optional[Value]: ...
    def validate(self, scope: ValidationScope = ..., ctype: ContentType = ...) -> None: ...
    def add_defaults(self, ctype: Optional[ContentType] = None, tag: bool = False) -> InstanceNode: ...
    def raw_value(self, filter: OutputFilter = ...) -> RawValue: ...
    def to_xml(self, filter: OutputFilter = ..., elem: Optional[ET.Element] = None) -> ET.Element: ...

class RootNode(InstanceNode):
    schema_data: SchemaData
    def __init__(self, value: Value, schema_node: DataNode, schema_data: SchemaData, timestamp: datetime) -> None: ...
    @property
    def namespace(self) -> None: ...
    def up(self) -> NoReturn: ...
    def to_xml(self, filter: OutputFilter = ..., tag: str = 'content-data', urn: str = 'urn:ietf:params:xml:ns:yang:ietf-yang-instance-data') -> ET.Element: ... # type: ignore[override]

class ObjectMember(InstanceNode):
    siblings: dict[InstanceName, Value]
    def __init__(self, key: InstanceName, siblings: dict[InstanceName, Value], value: Value, parinst: Optional[InstanceNode], schema_node: DataNode, timestamp: datetime) -> None: ...
    @property
    def qual_name(self) -> QualName: ...
    def sibling(self, name: InstanceName) -> ObjectMember: ...
    def look_up(self, raw: bool = False, /, **keys: dict[InstanceName, ScalarValue]) -> ArrayEntry: ...

class ArrayEntry(InstanceNode):
    before: LinkedList
    after: LinkedList
    def __init__(self, key: int, before: LinkedList, after: LinkedList, value: Value, parinst: Optional[InstanceNode], schema_node: DataNode, timestamp: Optional[datetime] = None) -> None: ...
    @property
    def index(self) -> int: ...
    @property
    def name(self) -> InstanceName: ...
    @property
    def qual_name(self) -> Optional[QualName]: ...
    def update(self, value: Union[RawValue, Value], raw: bool = False) -> ArrayEntry: ...
    def previous(self) -> ArrayEntry: ...
    def next(self) -> ArrayEntry: ...
    def insert_before(self, value: Union[RawValue, Value], raw: bool = False) -> ArrayEntry: ...
    def insert_after(self, value: Union[RawValue, Value], raw: bool = False) -> ArrayEntry: ...

class InstanceRoute(list[Union[MemberName, EntryKeys]]):
    def __hash__(self) -> int: ... # type: ignore[override]

class MemberName:
    name: YangIdentifier
    namespace: Optional[YangIdentifier]
    def __init__(self, name: YangIdentifier, ns: Optional[YangIdentifier]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def iname(self) -> str: ...
    def peek_step(self, val: ObjectValue, sn: DataNode) -> tuple[Optional[Value], DataNode]: ...
    def goto_step(self, inst: InstanceNode) -> InstanceNode: ...

class ActionName(MemberName):
    def peek_step(self, val: ObjectValue, sn: DataNode) -> tuple[None, DataNode]: ...
    def goto_step(self, inst: InstanceNode) -> NoReturn: ...

class EntryIndex:
    index: int
    def __init__(self, index: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def peek_step(self, val: ArrayValue, sn: DataNode) -> tuple[Optional[Value], DataNode]: ...
    def goto_step(self, inst: InstanceNode) -> InstanceNode: ...

class EntryValue:
    value: str
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def parse_value(self, sn: DataNode) -> ScalarValue: ...
    def peek_step(self, val: ArrayValue, sn: DataNode) -> tuple[Value, DataNode]: ...
    def goto_step(self, inst: InstanceNode) -> InstanceNode: ...

class EntryKeys:
    keys: dict[tuple[YangIdentifier, Optional[YangIdentifier]], str]
    def __init__(self, keys: dict[tuple[YangIdentifier, Optional[YangIdentifier]], str]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def parse_keys(self, sn: DataNode) -> dict[InstanceName, ScalarValue]: ...
    def peek_step(self, val: ArrayValue, sn: DataNode) -> tuple[ObjectValue, DataNode]: ...
    def goto_step(self, inst: InstanceNode) -> InstanceNode: ...

class ResourceIdParser(Parser):
    schema_node: DataNode
    def __init__(self, text: str, sn: DataNode) -> None: ...
    def parse(self) -> InstanceRoute: ...

class InstanceIdParser(Parser):
    def parse(self) -> InstanceRoute: ...
