from .enumerations import Axis, MultiplicativeOp
from .exceptions import InvalidArgument, XPathTypeError
from .instance import EntryIndex, EntryKeys, EntryValue, InstanceNode, InstanceRoute, MemberName
from .nodeset import NodeExpr, NodeSet, XPathValue
from .schemadata import SchemaContext
from .schemanode import SchemaNode
from .typealiases import QualName, SchemaRoute
from typing import Optional

class XPathContext:
    cnode: InstanceNode
    origin: InstanceNode
    position: int
    size: int
    def __init__(self, cnode: InstanceNode, origin: InstanceNode, position: int, size: int) -> None: ...
    def update_cnode(self, new_cnode: InstanceNode) -> XPathContext: ...

class Expr:
    indent: int
    def evaluate(self, node: InstanceNode) -> XPathValue: ...
    def syntax_tree(self, indent: int = 0) -> str: ...
    def as_instance_route(self) -> InstanceRoute: ...
    def as_schema_route(self) -> SchemaRoute: ...
    def check(self, ctx_root: SchemaNode) -> bool: ...

class UnaryExpr(Expr):
    expr: Optional[Expr]
    def __init__(self, expr: Optional[Expr]) -> None: ...

class BinaryExpr(Expr):
    left: Expr
    right: Expr
    def __init__(self, left: Expr, right: Expr) -> None: ...

class OrExpr(BinaryExpr): ...
class AndExpr(BinaryExpr): ...

class EqualityExpr(BinaryExpr):
    negate: bool
    def __init__(self, left: Expr, right: Expr, negate: bool) -> None: ...
    def as_instance_route(self) -> InstanceRoute: ...

class RelationalExpr(BinaryExpr):
    less: bool
    equal: bool
    def __init__(self, left: Expr, right: Expr, less: bool, equal: bool) -> None: ...

class AdditiveExpr(BinaryExpr):
    plus: bool
    def __init__(self, left: Expr, right: Expr, plus: bool) -> None: ...

class MultiplicativeExpr(BinaryExpr):
    operator: MultiplicativeOp
    def __init__(self, left: Expr, right: Expr, operator: MultiplicativeOp) -> None: ...

class UnaryMinusExpr(UnaryExpr):
    negate: bool
    def __init__(self, expr: Expr, negate: bool) -> None: ...

class UnionExpr(BinaryExpr): ...

class Literal(Expr):
    value: str
    def __init__(self, value: str) -> None: ...

class Number(Expr):
    value: float
    def __init__(self, value: float) -> None: ...

class PathExpr(BinaryExpr): ...

class FilterExpr(Expr):
    primary: Expr
    predicates: list[Expr]
    def __init__(self, primary: Expr, predicates: list[Expr]) -> None: ...

class LocationPath(BinaryExpr):
    def as_instance_route(self) -> InstanceRoute: ...

class Root(Expr):
    def as_instance_route(self) -> InstanceRoute: ...

class Step(Expr):
    axis: Axis
    qname: QualName
    predicates: list[Expr]
    def __init__(self, axis: Axis, qname: QualName, predicates: list[Expr]) -> None: ...
    def as_instance_route(self) -> InstanceRoute: ...

class FuncBitIsSet(BinaryExpr): ...
class FuncBoolean(UnaryExpr): ...
class FuncCeiling(UnaryExpr): ...

class FuncConcat(Expr):
    parts: list[Expr]
    def __init__(self, parts: list[Expr]) -> None: ...

class FuncContains(BinaryExpr): ...
class FuncCount(UnaryExpr): ...
class FuncCurrent(Expr): ...
class FuncDeref(UnaryExpr): ...

class FuncDerivedFrom(BinaryExpr):
    or_self: bool
    sctx: SchemaContext
    def __init__(self, left: Expr, right: Expr, or_self: bool, sctx: SchemaContext) -> None: ...

class FuncEnumValue(UnaryExpr): ...
class FuncFalse(Expr): ...
class FuncFloor(UnaryExpr): ...
class FuncLast(Expr): ...

class FuncName(UnaryExpr):
    local: bool
    def __init__(self, expr: Optional[Expr], local: bool) -> None: ...

class FuncNormalizeSpace(UnaryExpr): ...
class FuncNot(UnaryExpr): ...
class FuncNumber(UnaryExpr): ...
class FuncPosition(Expr): ...
class FuncReMatch(BinaryExpr): ...
class FuncRound(UnaryExpr): ...
class FuncStartsWith(BinaryExpr): ...
class FuncString(UnaryExpr): ...
class FuncStringLength(UnaryExpr): ...

class FuncSubstring(BinaryExpr):
    length: Optional[Expr]
    def __init__(self, string: Expr, start: Expr, length: Optional[Expr]) -> None: ...

class FuncSubstringAfter(BinaryExpr): ...
class FuncSubstringBefore(BinaryExpr): ...
class FuncSum(UnaryExpr): ...

class FuncTranslate(BinaryExpr):
    nchars: Expr
    def __init__(self, s1: Expr, s2: Expr, s3: Expr) -> None: ...

class FuncTrue(Expr): ...
