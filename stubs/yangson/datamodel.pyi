import xml.etree.ElementTree as ET
from .enumerations import ContentType
from .exceptions import BadYangLibraryData, InvalidArgument, NonexistentSchemaNode
from .instance import InstanceIdParser, InstanceRoute, ResourceIdParser, RootNode
from .schemadata import SchemaContext, SchemaData
from .schemanode import DataNode, SchemaNode, SchemaTreeNode
from .typealiases import DataPath, PrefName, SchemaPath, RawObject
from _typeshed import Incomplete
from typing import Optional

class DataModel:
    @classmethod
    def from_file(cls, name: str, mod_path: tuple[str] = ('.',), description: Optional[str] = None) -> DataModel: ...
    yang_library: dict[str, str]
    schema_data: SchemaData
    schema: SchemaTreeNode
    def __init__(self, yltxt: str, mod_path: tuple[str] = ('.',), description: Optional[str] = None) -> None: ...
    def module_set_id(self) -> str: ...
    def from_raw(self, robj: RawObject, subschema: Optional[PrefName] = None) -> RootNode: ...
    def from_xml(self, root: ET.Element, subschema: Optional[PrefName] = None) -> RootNode: ...
    def get_schema_node(self, path: SchemaPath) -> Optional[SchemaNode]: ...
    def get_data_node(self, path: DataPath) -> Optional[DataNode]: ...
    def ascii_tree(self, no_types: bool = False, val_count: bool = False) -> str: ...
    def clear_val_counters(self) -> None: ...
    def parse_instance_id(self, text: str) -> InstanceRoute: ...
    def parse_resource_id(self, text: str) -> InstanceRoute: ...
    def schema_digest(self) -> str: ...
