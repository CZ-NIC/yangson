from .exceptions import EndOfInput, InvalidArgument, ModuleNameMismatch, ModuleRevisionMismatch, StatementNotFound, UnexpectedInput
from .parser import Parser
from .typealiases import YangIdentifier
from typing import Optional

class Statement:
    prefix: Optional[YangIdentifier]
    keyword: YangIdentifier
    argument: Optional[str]
    superstmt: Optional[Statement]
    substatements: list[Statement]
    def __init__(self, kw: YangIdentifier, arg: Optional[str], pref: Optional[YangIdentifier] = None) -> None: ...
    def find1(self, kw: YangIdentifier, arg: Optional[str] = None, pref: Optional[YangIdentifier] = None, required: bool = False) -> Optional[Statement]: ...
    def find_all(self, kw: YangIdentifier, pref: Optional[YangIdentifier] = None) -> list['Statement']: ...
    def get_error_info(self) -> tuple[Optional[str], Optional[str]]: ...

class ModuleParser(Parser):
    unescape_map: dict[str, str]
    name: Optional[YangIdentifier]
    rev: Optional[str]
    def __init__(self, text: str, name: Optional[YangIdentifier] = None, rev: Optional[str] = None) -> None: ...
    def parse(self) -> Statement: ...
    @classmethod
    def unescape(cls, text: str) -> str: ...
    def opt_separator(self) -> bool: ...
    def separator(self) -> None: ...
    def keyword(self) -> tuple[Optional[str], str]: ...
    def statement(self) -> Statement: ...
    def argument(self) -> bool: ...
    def sq_argument(self) -> str: ...
    def dq_argument(self) -> str: ...
    def unq_argument(self) -> str: ...
    def substatements(self) -> list[Statement]: ...
