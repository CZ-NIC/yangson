from .instance import InstanceNode as InstanceNode
from _typeshed import Incomplete
from typing import Callable, Union

NodeExpr = Callable[[InstanceNode], "NodeSet"]
XPathValue = Union["NodeSet", str, float, bool]

def comparison(meth: Callable[[NodeSet, object], bool]) -> Callable[[NodeSet, object], bool]: ...

class NodeSet(list[XPathValue]):
    def union(self, ns: NodeSet) -> NodeSet: ...
    def bind(self, trans: NodeExpr) -> NodeSet: ...
    def __float__(self) -> float: ...
    @comparison
    def __eq__(self, val: object) -> bool: ...
    @comparison
    def __ne__(self, val: object) -> bool: ...
    @comparison
    def __gt__(self, val: object) -> bool: ...
    @comparison
    def __lt__(self, val: object) -> bool: ...
    @comparison
    def __ge__(self, val: object) -> bool: ...
    @comparison
    def __le__(self, val: object) -> bool: ...

