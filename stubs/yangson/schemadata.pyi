from .datatype import DataType
from .exceptions import BadYangLibraryData, CyclicImports, DefinitionNotFound, FeaturePrerequisiteError, InvalidFeatureExpression, InvalidSchemaPath, ModuleContentMismatch, ModuleNotFound, ModuleNotImplemented, ModuleNotImported, ModuleNotRegistered, MultipleImplementedRevisions, UnknownPrefix
from .parser import Parser
from .statement import ModuleParser, Statement
from .typealiases import ModuleId, PrefName, QualName, RevisionDate, SchemaNodeId, SchemaPath, SchemaRoute, YangIdentifier
from collections.abc import MutableSet
from typing import Any

class IdentityAdjacency:
    bases: MutableSet[QualName]
    derivs: MutableSet[QualName]
    def __init__(self) -> None: ...

class SchemaContext:
    schema_data: "SchemaData"
    default_ns: YangIdentifier
    text_mid: ModuleId
    def __init__(self, schema_data: SchemaData, default_ns: YangIdentifier, text_mid: ModuleId) -> None: ...

class ModuleData:
    features: MutableSet[YangIdentifier]
    main_module: ModuleId
    yang_id: YangIdentifier
    xml_namespace: str
    prefix_map: dict[YangIdentifier, ModuleId]
    statement: Statement
    path: str
    submodules: MutableSet[ModuleId]
    def __init__(self, main_module: YangIdentifier, yang_id: YangIdentifier) -> None: ...

class SchemaData:
    identity_adjs: dict[QualName, IdentityAdjacency]
    implement: dict[YangIdentifier, RevisionDate]
    module_search_path: list[str]
    modules: dict[ModuleId, ModuleData]
    modules_by_name: dict[str, ModuleData]
    modules_by_ns: dict[str, ModuleData]
    def __init__(self, yang_lib: dict[str, Any], mod_path: list[str]) -> None: ...
    def namespace(self, mid: ModuleId) -> YangIdentifier: ...
    def last_revision(self, mod: YangIdentifier) -> ModuleId: ...
    def prefix2ns(self, prefix: YangIdentifier, mid: ModuleId) -> YangIdentifier: ...
    def resolve_pname(self, pname: PrefName, mid: ModuleId) -> tuple[YangIdentifier, ModuleId]: ...
    def translate_pname(self, pname: PrefName, mid: ModuleId) -> QualName: ...
    def translate_node_id(self, ni: PrefName, sctx: SchemaContext) -> QualName: ...
    def prefix(self, imod: YangIdentifier, mid: ModuleId) -> YangIdentifier: ...
    def sni2route(self, sni: SchemaNodeId, sctx: SchemaContext) -> SchemaRoute: ...
    @staticmethod
    def path2route(path: SchemaPath) -> SchemaRoute: ...
    def get_definition(self, stmt: Statement, sctx: SchemaContext) -> tuple[Statement, SchemaContext]: ...
    def is_derived_from(self, identity: QualName, base: QualName) -> bool: ...
    def derived_from(self, identity: QualName) -> MutableSet[QualName]: ...
    def derived_from_all(self, identities: list[QualName]) -> MutableSet[QualName]: ...
    def if_features(self, stmt: Statement, mid: ModuleId) -> bool: ...

class FeatureExprParser(Parser):
    mid: ModuleId
    schema_data: SchemaData
    def __init__(self, text: str, schema_data: SchemaData, mid: ModuleId) -> None: ...
    def parse(self) -> bool: ...
