from .datatype import DataType as DataType
from .exceptions import BadYangLibraryData as BadYangLibraryData, CyclicImports as CyclicImports, DefinitionNotFound as DefinitionNotFound, FeaturePrerequisiteError as FeaturePrerequisiteError, InvalidFeatureExpression as InvalidFeatureExpression, InvalidSchemaPath as InvalidSchemaPath, ModuleContentMismatch as ModuleContentMismatch, ModuleNotFound as ModuleNotFound, ModuleNotImplemented as ModuleNotImplemented, ModuleNotImported as ModuleNotImported, ModuleNotRegistered as ModuleNotRegistered, MultipleImplementedRevisions as MultipleImplementedRevisions, UnknownPrefix as UnknownPrefix
from .parser import Parser as Parser
from .statement import ModuleParser as ModuleParser, Statement as Statement
from .typealiases import ModuleId as ModuleId, PrefName as PrefName, QualName as QualName, RevisionDate as RevisionDate, SchemaNodeId as SchemaNodeId, SchemaPath as SchemaPath, SchemaRoute as SchemaRoute, YangIdentifier as YangIdentifier
from _typeshed import Incomplete
from collections.abc import MutableSet
from typing import Any

class IdentityAdjacency:
    bases: MutableSet[QualName]
    derivs: MutableSet[QualName]
    def __init__(self) -> None: ...

class SchemaContext:
    schema_data: Incomplete
    default_ns: Incomplete
    text_mid: Incomplete
    def __init__(self, schema_data: SchemaData, default_ns: YangIdentifier, text_mid: ModuleId) -> None: ...

class ModuleData:
    features: MutableSet[YangIdentifier]
    main_module: ModuleId
    yang_id: Incomplete
    xml_namespace: str
    prefix_map: dict[YangIdentifier, ModuleId]
    statement: Statement
    path: str
    submodules: MutableSet[ModuleId]
    def __init__(self, main_module: YangIdentifier, yang_id: YangIdentifier) -> None: ...

class SchemaData:
    identity_adjs: dict[QualName, IdentityAdjacency]
    implement: dict[YangIdentifier, RevisionDate]
    module_search_path: Incomplete
    modules: dict[ModuleId, ModuleData]
    modules_by_name: dict[str, ModuleData]
    modules_by_ns: Incomplete
    def __init__(self, yang_lib: dict[str, Any], mod_path: list[str]) -> None: ...
    def namespace(self, mid: ModuleId) -> YangIdentifier: ...
    def last_revision(self, mod: YangIdentifier) -> ModuleId: ...
    def prefix2ns(self, prefix: YangIdentifier, mid: ModuleId) -> YangIdentifier: ...
    def resolve_pname(self, pname: PrefName, mid: ModuleId) -> tuple[YangIdentifier, ModuleId]: ...
    def translate_pname(self, pname: PrefName, mid: ModuleId) -> QualName: ...
    def translate_node_id(self, ni: PrefName, sctx: SchemaContext) -> QualName: ...
    def prefix(self, imod: YangIdentifier, mid: ModuleId) -> YangIdentifier: ...
    def sni2route(self, sni: SchemaNodeId, sctx: SchemaContext) -> SchemaRoute: ...
    @staticmethod
    def path2route(path: SchemaPath) -> SchemaRoute: ...
    def get_definition(self, stmt: Statement, sctx: SchemaContext) -> tuple[Statement, SchemaContext]: ...
    def is_derived_from(self, identity: QualName, base: QualName) -> bool: ...
    def derived_from(self, identity: QualName) -> MutableSet[QualName]: ...
    def derived_from_all(self, identities: list[QualName]) -> MutableSet[QualName]: ...
    def if_features(self, stmt: Statement, mid: ModuleId) -> bool: ...

class FeatureExprParser(Parser):
    mid: Incomplete
    schema_data: Incomplete
    def __init__(self, text: str, schema_data: SchemaData, mid: ModuleId) -> None: ...
    def parse(self) -> bool: ...
