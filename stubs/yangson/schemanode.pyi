import xml.etree.ElementTree as ET
from .constraint import Must as Must
from .datatype import DataType as DataType, IdentityrefType as IdentityrefType, LinkType as LinkType, RawScalar as RawScalar
from .enumerations import Axis as Axis, ContentType as ContentType, DefaultDeny as DefaultDeny, NodeStatus as NodeStatus, ValidationScope as ValidationScope
from .exceptions import AnnotationTypeError as AnnotationTypeError, InvalidArgument as InvalidArgument, MissingAnnotationTarget as MissingAnnotationTarget, MissingModuleNamespace as MissingModuleNamespace, RawMemberError as RawMemberError, RawTypeError as RawTypeError, SchemaError as SchemaError, SemanticError as SemanticError, UndefinedAnnotation as UndefinedAnnotation, YangTypeError as YangTypeError, YangsonException as YangsonException
from .instance import ArrayEntry as ArrayEntry, EmptyList as EmptyList, InstanceNode as InstanceNode, InstanceRoute as InstanceRoute, MemberName as MemberName, ObjectMember as ObjectMember
from .instvalue import ArrayValue as ArrayValue, EntryValue as EntryValue, MetadataObject as MetadataObject, ObjectValue as ObjectValue, Value as Value
from .schemadata import IdentityAdjacency as IdentityAdjacency, SchemaContext as SchemaContext, SchemaData as SchemaData
from .schpattern import ChoicePattern as ChoicePattern, ConditionalPattern as ConditionalPattern, Empty as Empty, Member as Member, NotAllowed as NotAllowed, Pair as Pair, SchemaPattern as SchemaPattern
from .statement import Statement as Statement
from .typealiases import DataPath as DataPath, InstanceName as InstanceName, JSONPointer as JSONPointer, QualName as QualName, RawEntry as RawEntry, RawList as RawList, RawMetadataObject as RawMetadataObject, RawObject as RawObject, RawValue as RawValue, ScalarValue as ScalarValue, SchemaRoute as SchemaRoute, YangIdentifier as YangIdentifier
from .xpathast import Expr as Expr, LocationPath as LocationPath, Root as Root, Step as Step
from .xpathparser import XPathParser as XPathParser
from _typeshed import Incomplete
from typing import Optional

class Annotation:
    type: Incomplete
    description: Incomplete
    def __init__(self, type: DataType, description: Optional[str] = None) -> None: ...

class SchemaNode:
    name: YangIdentifier | None
    ns: YangIdentifier | None
    parent: InternalNode | None
    description: str | None
    must: list[Must]
    when: Expr | None
    val_count: int
    def __init__(self) -> None: ...
    @property
    def qual_name(self) -> QualName: ...
    @property
    def config(self) -> bool: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def mandatory_config(self) -> bool: ...
    @property
    def status(self) -> NodeStatus: ...
    def delete(self) -> None: ...
    def schema_root(self) -> SchemaTreeNode: ...
    def content_type(self) -> ContentType: ...
    def data_parent(self) -> InternalNode | None: ...
    def iname(self) -> InstanceName: ...
    def data_path(self) -> DataPath: ...
    def state_roots(self) -> list[DataPath]: ...
    def from_raw(self, rval: RawValue, jptr: JSONPointer = '') -> Value: ...
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ...
    def clear_val_counters(self) -> None: ...

class InternalNode(SchemaNode):
    children: list[SchemaNode]
    schema_pattern: SchemaPattern | None
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def get_child(self, name: YangIdentifier, ns: Optional[YangIdentifier] = None) -> SchemaNode | None: ...
    def get_schema_descendant(self, route: SchemaRoute) -> SchemaNode | None: ...
    def get_data_child(self, name: YangIdentifier, ns: Optional[YangIdentifier] = None) -> DataNode | None: ...
    def filter_children(self, ctype: Optional[ContentType] = None) -> list[SchemaNode]: ...
    def data_children(self) -> list['DataNode']: ...
    def from_raw(self, rval: RawObject, jptr: JSONPointer = '') -> ObjectValue: ...
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> ObjectValue: ...
    def clear_val_counters(self) -> None: ...

class GroupNode(InternalNode): ...

class SchemaTreeNode(GroupNode):
    annotations: dict[QualName, Annotation]
    schema_data: Incomplete
    def __init__(self, schemadata: Optional[SchemaData] = None) -> None: ...
    def iname(self) -> InstanceName: ...
    def data_parent(self) -> None: ...

class DataNode(SchemaNode):
    default_deny: DefaultDeny
    def __init__(self) -> None: ...
    def orphan_instance(self, rval: RawValue) -> ObjectMember: ...
    def split_instance_route(self, route: InstanceRoute) -> tuple[InstanceRoute, InstanceRoute] | None: ...

class TerminalNode(SchemaNode):
    type: DataType
    def __init__(self) -> None: ...
    def content_type(self) -> ContentType: ...
    @property
    def units(self) -> str | None: ...
    def from_raw(self, rval: RawScalar, jptr: JSONPointer = '') -> ScalarValue: ... # type: ignore[override]
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ...

class ContainerNode(DataNode, InternalNode):
    presence: bool
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def mandatory_config(self) -> bool: ...

class SequenceNode(DataNode):
    min_elements: int
    max_elements: int | None
    user_ordered: bool
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def from_raw(self, rval: RawList, jptr: JSONPointer = '') -> ArrayValue: ... # type: ignore[override]
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False, tagname: Optional[str] = None) -> ArrayValue: ...
    def entry_from_raw(self, rval: RawEntry, jptr: JSONPointer = '') -> EntryValue: ...
    def entry_from_xml(self, rval: ET.Element, jptr: JSONPointer = '') -> EntryValue: ...

class ListNode(SequenceNode, InternalNode):
    keys: list[QualName]
    unique: list[list[LocationPath]]
    def __init__(self) -> None: ...
    def orphan_entry(self, rval: RawObject) -> ArrayEntry: ...
    def from_raw(self, rval: RawList, jptr: JSONPointer = '') -> Value: ... # type: ignore[override]
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ... # type: ignore[override]

class ChoiceNode(InternalNode):
    default_case: QualName
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...

class CaseNode(InternalNode): ...

class LeafNode(DataNode, TerminalNode):
    def __init__(self) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    @property
    def default(self) -> ScalarValue | None: ...

class LeafListNode(SequenceNode, TerminalNode):
    @property
    def default(self) -> ScalarValue | None: ...
    def from_raw(self, rval: RawList, jptr: JSONPointer = "") -> ArrayValue: ... # type: ignore[override]

class AnyContentNode(DataNode):
    def __init__(self) -> None: ...
    def content_type(self) -> ContentType: ...
    @property
    def mandatory(self) -> bool: ...
    def from_raw(self, rval: RawValue, jptr: JSONPointer = '') -> Value: ...
    def to_raw(self, value: Value) -> RawValue: ...
    def from_xml(self, rval: ET.Element, jptr: JSONPointer = '', isroot: bool = False) -> Value: ...

class AnydataNode(AnyContentNode): ...
class AnyxmlNode(AnyContentNode): ...

class RpcActionNode(SchemaTreeNode):
    default_deny: DefaultDeny
    def __init__(self) -> None: ...
    def iname(self) -> InstanceName: ...
    def data_parent(self) -> None: ...

class InputNode(InternalNode, DataNode):
    name: str
    ns: Incomplete
    def __init__(self, ns: str) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def iname(self) -> InstanceName: ...

class OutputNode(InternalNode, DataNode):
    name: str
    ns: Incomplete
    def __init__(self, ns: str) -> None: ...
    @property
    def mandatory(self) -> bool: ...
    def iname(self) -> InstanceName: ...

class NotificationNode(SchemaTreeNode):
    default_deny: DefaultDeny
    def __init__(self) -> None: ...
