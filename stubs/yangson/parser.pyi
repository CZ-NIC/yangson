from .exceptions import EndOfInput, UnexpectedInput
from .typealiases import YangIdentifier
from _typeshed import Incomplete
from typing import Callable, Pattern, Optional

TransitionTable = list[dict[str, Callable[[], int]]]

class Parser:
    ident_re: Incomplete
    ws_re: Incomplete
    uint_re: Incomplete
    ufloat_re: Incomplete
    input: Incomplete
    offset: int
    def __init__(self, text: str) -> None: ...
    def adv_skip_ws(self) -> bool: ...
    def at_end(self) -> bool: ...
    def at_last_char(self) -> bool: ...
    def char(self, c: str) -> None: ...
    def dfa(self, ttab: TransitionTable, init: int = 0) -> int: ...
    def line_column(self) -> tuple[int, int]: ...
    def match_regex(self, regex: Pattern[str], required: bool = False, meaning: str = '') -> str: ...
    def one_of(self, chset: str) -> str: ...
    def peek(self) -> str: ...
    def prefixed_name(self) -> tuple[YangIdentifier, Optional[YangIdentifier]]: ...
    def remaining(self) -> str: ...
    def skip_ws(self) -> bool: ...
    def test_string(self, string: str) -> bool: ...
    def unsigned_integer(self) -> int: ...
    def unsigned_float(self) -> float: ...
    def up_to(self, term: str) -> str: ...
    def yang_identifier(self) -> YangIdentifier: ...
