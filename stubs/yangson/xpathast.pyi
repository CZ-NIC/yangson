from .enumerations import Axis as Axis, MultiplicativeOp as MultiplicativeOp
from .exceptions import InvalidArgument as InvalidArgument, XPathTypeError as XPathTypeError
from .instance import EntryIndex as EntryIndex, EntryKeys as EntryKeys, EntryValue as EntryValue, InstanceNode as InstanceNode, InstanceRoute as InstanceRoute, MemberName as MemberName
from .nodeset import NodeExpr as NodeExpr, NodeSet as NodeSet, XPathValue as XPathValue
from .schemadata import SchemaContext as SchemaContext
from .typealiases import QualName as QualName
from _typeshed import Incomplete

class XPathContext:
    cnode: Incomplete
    origin: Incomplete
    position: Incomplete
    size: Incomplete
    def __init__(self, cnode: InstanceNode, origin: InstanceNode, position: int, size: int) -> None: ...
    def update_cnode(self, new_cnode: InstanceNode) -> XPathContext: ...

class Expr:
    indent: int
    def evaluate(self, node: InstanceNode) -> XPathValue: ...
    def syntax_tree(self, indent: int = 0) -> str: ...
    def as_instance_route(self) -> InstanceRoute: ...

class UnaryExpr(Expr):
    expr: Incomplete
    def __init__(self, expr: Expr | None) -> None: ...

class BinaryExpr(Expr):
    left: Incomplete
    right: Incomplete
    def __init__(self, left: Expr, right: Expr) -> None: ...

class OrExpr(BinaryExpr): ...
class AndExpr(BinaryExpr): ...

class EqualityExpr(BinaryExpr):
    negate: Incomplete
    def __init__(self, left: Expr, right: Expr, negate: bool) -> None: ...
    def as_instance_route(self) -> InstanceRoute: ...

class RelationalExpr(BinaryExpr):
    less: Incomplete
    equal: Incomplete
    def __init__(self, left: Expr, right: Expr, less: bool, equal: bool) -> None: ...

class AdditiveExpr(BinaryExpr):
    plus: Incomplete
    def __init__(self, left: Expr, right: Expr, plus: bool) -> None: ...

class MultiplicativeExpr(BinaryExpr):
    operator: Incomplete
    def __init__(self, left: Expr, right: Expr, operator: MultiplicativeOp) -> None: ...

class UnaryMinusExpr(UnaryExpr):
    negate: Incomplete
    def __init__(self, expr: Expr, negate: bool) -> None: ...

class UnionExpr(BinaryExpr): ...

class Literal(Expr):
    value: Incomplete
    def __init__(self, value: str) -> None: ...

class Number(Expr):
    value: Incomplete
    def __init__(self, value: float) -> None: ...

class PathExpr(BinaryExpr): ...

class FilterExpr(Expr):
    primary: Incomplete
    predicates: Incomplete
    def __init__(self, primary: Expr, predicates: list[Expr]) -> None: ...

class LocationPath(BinaryExpr):
    def as_instance_route(self) -> InstanceRoute: ...

class Root(Expr):
    def as_instance_route(self) -> InstanceRoute: ...

class Step(Expr):
    axis: Incomplete
    qname: Incomplete
    predicates: Incomplete
    def __init__(self, axis: Axis, qname: QualName, predicates: list[Expr]) -> None: ...
    def as_instance_route(self) -> InstanceRoute: ...

class FuncBitIsSet(BinaryExpr): ...
class FuncBoolean(UnaryExpr): ...
class FuncCeiling(UnaryExpr): ...

class FuncConcat(Expr):
    parts: Incomplete
    def __init__(self, parts: list[Expr]) -> None: ...

class FuncContains(BinaryExpr): ...
class FuncCount(UnaryExpr): ...
class FuncCurrent(Expr): ...
class FuncDeref(UnaryExpr): ...

class FuncDerivedFrom(BinaryExpr):
    or_self: Incomplete
    sctx: Incomplete
    def __init__(self, left: Expr, right: Expr, or_self: bool, sctx: SchemaContext) -> None: ...

class FuncEnumValue(UnaryExpr): ...
class FuncFalse(Expr): ...
class FuncFloor(UnaryExpr): ...
class FuncLast(Expr): ...

class FuncName(UnaryExpr):
    local: Incomplete
    def __init__(self, expr: Expr | None, local: bool) -> None: ...

class FuncNormalizeSpace(UnaryExpr): ...
class FuncNot(UnaryExpr): ...
class FuncNumber(UnaryExpr): ...
class FuncPosition(Expr): ...
class FuncReMatch(BinaryExpr): ...
class FuncRound(UnaryExpr): ...
class FuncStartsWith(BinaryExpr): ...
class FuncString(UnaryExpr): ...
class FuncStringLength(UnaryExpr): ...

class FuncSubstring(BinaryExpr):
    length: Incomplete
    def __init__(self, string: Expr, start: Expr, length: Expr | None) -> None: ...

class FuncSubstringAfter(BinaryExpr): ...
class FuncSubstringBefore(BinaryExpr): ...
class FuncSum(UnaryExpr): ...

class FuncTranslate(BinaryExpr):
    nchars: Incomplete
    def __init__(self, s1: Expr, s2: Expr, s3: Expr) -> None: ...

class FuncTrue(Expr): ...
