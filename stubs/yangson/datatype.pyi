import decimal
import xml.etree.ElementTree as ET
from .constraint import Intervals as Intervals, Pattern as Pattern
from .exceptions import InvalidArgument as InvalidArgument, InvalidLeafrefPath as InvalidLeafrefPath, MissingModuleNamespace as MissingModuleNamespace, ModuleNotRegistered as ModuleNotRegistered, ParserException as ParserException, UnknownPrefix as UnknownPrefix
from .instance import InstanceIdParser as InstanceIdParser, InstanceNode as InstanceNode, InstanceRoute as InstanceRoute
from .schemadata import SchemaContext as SchemaContext
from .schemanode import TerminalNode as TerminalNode
from .statement import Statement as Statement
from .typealiases import QualName as QualName, RawScalar as RawScalar, ScalarValue as ScalarValue, YangIdentifier as YangIdentifier
from .xpathparser import XPathParser as XPathParser
from _typeshed import Incomplete
from typing import Any, Optional

class DataType:
    sctx: Incomplete
    default: Incomplete
    name: Incomplete
    error_tag: Incomplete
    error_message: Incomplete
    units: Incomplete
    def __init__(self, sctx: SchemaContext, name: YangIdentifier | None) -> None: ...
    def __contains__(self, val: ScalarValue) -> bool: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> ScalarValue | None: ...
    def to_raw(self, val: ScalarValue) -> Optional[RawScalar]: ...
    def to_xml(self, val: ScalarValue) -> str | None: ...
    def parse_value(self, text: str) -> ScalarValue | None: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...
    def from_yang(self, text: str) -> ScalarValue: ...
    def yang_type(self) -> YangIdentifier: ...

class EmptyType(DataType):
    def canonical_string(self, val: ScalarValue) -> str | None: ...
    def __contains__(self, val: ScalarValue) -> bool: ...
    def parse_value(self, text: str) -> tuple[None] | None: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def to_raw(self, val: ScalarValue) ->  Optional[RawScalar]: ...
    def from_xml(self, xml: ET.Element) -> tuple[None] | None: ...
    def to_xml(self, val: ScalarValue) -> Optional[str]: ...

class BitsType(DataType):
    bit: Incomplete
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def sorted_bits(self) -> list[tuple[str, int]]: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> Optional[ScalarValue]: ...
    def __contains__(self, val: ScalarValue) -> bool: ...
    def to_raw(self, val: ScalarValue) -> Optional[RawScalar]: ...
    def to_xml(self, val: ScalarValue) -> Optional[str]: ...
    def as_int(self, val: ScalarValue) -> int: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...

class BooleanType(DataType):
    def __contains__(self, val: ScalarValue) -> bool: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> ScalarValue | None: ...
    def parse_value(self, text: str) -> bool | None: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...
    def to_xml(self, val: ScalarValue) -> Optional[str]: ...

class LinearType(DataType):
    length: Intervals | None
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def __contains__(self, val: ScalarValue) -> bool: ...

class StringType(LinearType):
    patterns: list[Pattern]
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def __contains__(self, val: ScalarValue) -> bool: ...

class BinaryType(LinearType):
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> Optional[ScalarValue]: ...
    def __contains__(self, val: ScalarValue) -> bool: ...
    def to_raw(self, val: ScalarValue) -> Optional[RawScalar]: ...
    def to_xml(self, val: ScalarValue) -> Optional[str]: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...

class EnumerationType(DataType):
    enum: dict[str, int]
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def sorted_enums(self) -> list[tuple[str, int]]: ...
    def __contains__(self, val: ScalarValue) -> bool: ...

class LinkType(DataType):
    require_instance: bool
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...

class LeafrefType(LinkType):
    path: Incomplete
    ref_type: Incomplete
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...
    def __contains__(self, val: ScalarValue) -> bool: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> Optional[ScalarValue]: ...
    def to_raw(self, val: ScalarValue) -> RawScalar: ...
    def to_xml(self, val: ScalarValue) -> Optional[str]: ...
    def parse_value(self, text: str) -> ScalarValue | None: ...
    def from_yang(self, text: str) -> ScalarValue: ...

class InstanceIdentifierType(LinkType):
    def yang_type(self) -> YangIdentifier: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> Optional[ScalarValue]: ...
    def to_raw(self, val: ScalarValue) -> Optional[str]: ...
    def to_xml(self, val: ScalarValue) -> Optional[str]: ...
    def from_yang(self, text: str) -> ScalarValue: ...

class IdentityrefType(DataType):
    bases: list[QualName]
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> Optional[ScalarValue]: ...
    def __contains__(self, val: ScalarValue) -> bool: ...
    def to_raw(self, val: ScalarValue) -> Optional[str]: ...
    def to_xml(self, val: ScalarValue) -> str: ...
    def from_yang(self, text: str) -> ScalarValue: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...

class NumericType(DataType):
    range: Intervals | None
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def __contains__(self, val: ScalarValue) -> bool: ...

class Decimal64Type(NumericType):
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def from_raw(self, raw: RawScalar) -> Optional[ScalarValue]: ...
    def from_xml(self, xml: ET.Element) -> decimal.Decimal | None: ...
    def to_raw(self, val: ScalarValue) -> Optional[str]: ...
    def to_xml(self, val: ScalarValue) -> str: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...
    def __contains__(self, val: ScalarValue) -> bool: ...

class IntegralType(NumericType):
    octhex: Incomplete
    def __contains__(self, val: ScalarValue) -> bool: ...
    def parse_value(self, text: str) -> int | None: ...
    def from_raw(self, raw: RawScalar) -> Optional[int]: ...
    def from_xml(self, xml: ET.Element) -> int | None: ...
    def from_yang(self, text: str) -> int: ...

class Int8Type(IntegralType): ...
class Int16Type(IntegralType): ...
class Int32Type(IntegralType): ...

class Int64Type(IntegralType):
    def from_raw(self, raw: RawScalar) -> int | None: ...
    def from_xml(self, xml: ET.Element) -> int | None: ...
    def to_raw(self, val: ScalarValue) -> str: ...
    def to_xml(self, val: ScalarValue) -> str: ...

class Uint8Type(IntegralType): ...
class Uint16Type(IntegralType): ...
class Uint32Type(IntegralType): ...

class Uint64Type(IntegralType):
    def from_raw(self, raw: RawScalar) -> Optional[int]: ...
    def from_xml(self, xml: ET.Element) -> int | None: ...
    def to_raw(self, val: ScalarValue) -> str: ...
    def to_xml(self, val: ScalarValue) -> str: ...

class UnionType(DataType):
    types: list[DataType]
    def __init__(self, sctx: SchemaContext, name: YangIdentifier) -> None: ...
    def to_raw(self, val: ScalarValue) -> RawScalar: ...
    def to_xml(self, val: ScalarValue) -> str: ...
    def canonical_string(self, val: ScalarValue) -> str | None: ...
    def parse_value(self, text: str) -> ScalarValue | None: ...
    def from_raw(self, raw: RawScalar) -> ScalarValue | None: ...
    def from_xml(self, xml: ET.Element) -> ScalarValue | None: ...
    def __contains__(self, val: Any) -> bool: ...
